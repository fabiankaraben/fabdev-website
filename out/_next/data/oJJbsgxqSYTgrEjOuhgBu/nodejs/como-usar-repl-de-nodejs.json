{"pageProps":{"post":{"title":"Cómo usar REPL de Node.js","date":"2021-12-16T05:35:07.322Z","slug":"nodejs/como-usar-repl-de-nodejs","author":{"name":"Fabián Karaben","picture":"/assets/authors/fabian.png"},"content":"<p>Read-Eval-Print-Loop (REPL) de Node.js es un shell interactivo que procesa las expresiones de Node.js. El shell lee (<strong>Read</strong>) el código JavaScript que ingresa el usuario, evalúa (<strong>Eval</strong>) el resultado interpretando la línea de código, imprime (<strong>Print</strong>) el resultado al usuario y se repite (<strong>Loop</strong>) hasta que el usuario indique que se debe salir del bucle.</p>\n<p>REPL se incluye con cada instalación de Node.js y te permite probar y explorar rápidamente el código JavaScript dentro del entorno de Node sin tener que crear un archivo.</p>\n<h2>Requisitos previos</h2>\n<p>Para completar este tutorial, necesitarás:</p>\n<ul>\n<li>Node.js instalado en tu máquina de desarrollo. Este tutorial usa la versión 10.16.0. Para instalar esto en macOS o Ubuntu, sigue los pasos en <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-and-create-a-local-development-environment-on-macos\">Cómo instalar Node.js y crear un entorno de desarrollo local en macOS</a> o la sección \"Instalación mediante un PPA\" de <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04\">Cómo instalar Node.js en Ubuntu</a> .</li>\n<li>Un conocimiento básico de JavaScript, que puedes encontrar aquí: <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-javascript\">Cómo codificar en JavaScript</a>.</li>\n</ul>\n<h2>Paso 1 - Iniciar y detener el REPL</h2>\n<p>Si tienes <code>node</code> instalado, también tienes el REPL de Node.js. Para iniciarlo, simplemente ingresa <code>node</code> en su shell de línea de comandos:</p>\n<pre><code class=\"language-bash\">node\n</code></pre>\n<p>Esto da como resultado el mensaje REPL:</p>\n<pre><code class=\"language-bash\">>\n</code></pre>\n<p>El símbolo <code>></code> te permite saber que puedes ingresar código JavaScript para ser evaluado inmediatamente.</p>\n<p>Por ejemplo, intenta agregar dos números en el REPL escribiendo esto:</p>\n<pre><code class=\"language-bash\">> 2 + 2\n</code></pre>\n<p>Cuando presiones <em>ENTER</em>, REPL evaluará la expresión y devolverá:</p>\n<pre><code class=\"language-bash\">4\n</code></pre>\n<p>Para salir de REPL, puedes escribir <code>.exit</code>, o presionar <em>CTRL + D</em> una vez, o presionar <em>CTRL + C</em> dos veces.</p>\n<p>Sabiendo cómo ingresar y salir de REPL, echemos un vistazo a cómo puedes usar REPL para ejecutar código JavaScript simple.</p>\n<h2>Paso 2 - Ejecución de código en REPL de Node.js</h2>\n<p>REPL es una forma rápida de probar el código JavaScript sin tener que crear un archivo. Casi todas las expresiones válidas de JavaScript o Node.js se pueden ejecutar en REPL.</p>\n<p>En el paso anterior ya probaste la suma de dos números, ahora intentemos la división. Para hacerlo, inicia un nuevo REPL:</p>\n<pre><code class=\"language-bash\">node\n</code></pre>\n<p>Y escribe:</p>\n<pre><code class=\"language-bash\">> 10 / 5\n</code></pre>\n<p>Presione <em>ENTER</em>, y la salida será <code>2</code>, como se esperaba:</p>\n<pre><code class=\"language-bash\">2\n</code></pre>\n<p>El REPL también puede procesar operaciones en cadenas. Concatena las siguientes cadenas en tu REPL escribiendo:</p>\n<pre><code class=\"language-bash\">> \"Hello \" + \"World\"\n</code></pre>\n<p>Nuevamente, presiona ENTRAR y se evaluará la expresión de cadena:</p>\n<pre><code class=\"language-bash\">'Hello World'\n</code></pre>\n<blockquote>\n<p><strong>Nota</strong>: Es posible que hayas notado que la salida utiliza comillas simples en lugar de comillas dobles. En JavaScript, las comillas utilizadas para una cadena no afectan su valor.</p>\n</blockquote>\n<h3>Llamando funciones</h3>\n<p>Al escribir código Node.js, es común imprimir mensajes a través del método global <code>console.log</code> o una función similar. Escribe lo siguiente:</p>\n<pre><code class=\"language-bash\">> console.log(\"Hi\")\n</code></pre>\n<p>Al presionar <em>ENTER</em> se obtiene el siguiente resultado:</p>\n<pre><code class=\"language-bash\">Hi\nundefined\n</code></pre>\n<p>El primer resultado es la salida de <code>console.log</code>, que imprime un mensaje en el stream de salida estándar (la pantalla). Debido a que <code>console.log</code> imprime una cadena en lugar de devolver una cadena, el mensaje se ve sin comillas. El <code>undefined</code> es el valor de retorno de la función.</p>\n<h3>Creando variables</h3>\n<p>Rara vez trabajas con literales en JavaScript. La creación de una variable en REPL funciona de la misma manera que cuando se trabaja con archivos <code>.js</code>. Escribe lo siguiente:</p>\n<pre><code class=\"language-bash\">> let age = 30\n</code></pre>\n<p>Presionar <em>ENTER</em>, y esto da como resultado:</p>\n<pre><code class=\"language-bash\">undefined\n</code></pre>\n<p>Como antes, con <code>console.log</code>, el valor de retorno de este comando es <code>undefined</code> . La variable <code>age</code> estará disponible hasta que salgas de la sesión REPL. Por ejemplo, puedes multiplicar la edad por dos. Escribe lo siguiente en el indicador y presiona <em>ENTER</em>:</p>\n<pre><code class=\"language-bash\">> age * 2\n</code></pre>\n<p>El resultado es:</p>\n<pre><code class=\"language-bash\">60\n</code></pre>\n<p>Debido a que REPL devuelve valores, no es necesario utilizar <code>console.log</code> o funciones similares para ver el resultado en la pantalla. De forma predeterminada, cualquier valor devuelto aparecerá en la pantalla.</p>\n<h3>Bloques multilínea</h3>\n<p>REPL también admite bloques de código de varias líneas. Por ejemplo, puedes crear una función que agregue <code>3</code> a un número dado. Inicia la función escribiendo lo siguiente:</p>\n<pre><code class=\"language-bash\">> const add3 = (num) => {\n</code></pre>\n<p>Luego, presionando <em>ENTER</em> cambiará el mensaje a:</p>\n<pre><code class=\"language-bash\">...\n</code></pre>\n<p>REPL notó un corchete abierto y, por lo tanto, asume que estás escribiendo más de una línea de código, y que eso debe sangrarse. Para facilitar la lectura, REPL agrega 3 puntos y un espacio en la siguiente línea, por lo que el siguiente código parece tener sangría.</p>\n<p>Ingresa la segunda y tercera línea de la función, una a la vez, presionando ENTER después de cada una:</p>\n<pre><code class=\"language-bash\">... return num + 3;\n... }\n</code></pre>\n<p>Si presionas <em>ENTER</em> después del corchete de cierre, se mostrará <code>undefined</code>, que es el \"valor de retorno\" de la función asignada a una variable. El indicador <code>...</code> desaparece y regresa el indicador <code>></code>:</p>\n<pre><code class=\"language-bash\">undefined\n>\n</code></pre>\n<p>Ahora, llama a <code>add3()</code> especificando un valor:</p>\n<pre><code class=\"language-bash\">> add3(10)\n\n</code></pre>\n<p>Como se esperaba, el resultado es:</p>\n<pre><code class=\"language-bash\">13\n</code></pre>\n<p>Puedes utilizar REPL para probar fragmentos de código JavaScript antes de incluirlos en tus programas. REPL también incluye algunos atajos útiles para facilitar ese proceso.</p>\n<h2>Paso 3 - Dominar los atajos de REPL</h2>\n<p>REPL proporciona atajos para reducir el tiempo de codificación cuando sea posible. Mantiene un historial de todos los comandos ingresados ​​y nos permite recorrerlos y repetir un comando si es necesario.</p>\n<p>Por ejemplo, ingresa la siguiente cadena:</p>\n<pre><code class=\"language-bash\">\"The answer to life the universe and everything is 32\"\n</code></pre>\n<p>Esto resulta en:</p>\n<pre><code class=\"language-bash\">'The answer to life the universe and everything is 32'\n</code></pre>\n<p>Si queremos editar la cadena y cambiar el <code>\"32\"</code> a <code>\"42\"</code>, en el indicador, usa la tecla de flecha <em>ARRIBA</em> para volver al comando anterior:</p>\n<pre><code class=\"language-bash\">> \"The answer to life the universe and everything is 32\"\n</code></pre>\n<p>Mueve el cursor hacia la izquierda, elimina el <code>3</code>, ingresa un <code>4</code> y presione <em>ENTER</em> nuevamente:</p>\n<pre><code class=\"language-bash\">'The answer to life the universe and everything is 42'\n</code></pre>\n<p>Continúa presionando la tecla de flecha <em>ARRIBA</em> y retrocederás más a través de tu historial hasta el primer comando utilizado en la sesión REPL actual. Por el contrario, presionar <em>ABAJO</em> iterarás hacia los comandos más recientes en el historial.</p>\n<p>Cuando hayas terminado de maniobrar a través de tu historial de comandos, presiona <em>ABAJO</em> repetidamente hasta que hayas agotado tu historial de comandos recientes.</p>\n<p>Para obtener rápidamente el último valor evaluado, utiliza el carácter de subrayado. Escribe <code>_</code> y presiona <em>ENTER</em>:</p>\n<pre><code class=\"language-bash\">> _\n</code></pre>\n<p>La cadena de texto ingresada anteriormente aparecerá nuevamente:</p>\n<pre><code class=\"language-bash\">'The answer to life the universe and everything is 42'\n</code></pre>\n<p>REPL también tiene un autocompletado para funciones, variables y palabras clave. Si deseas encontrar la raíz cuadrada de un número usando la función <code>Math.sqrt</code>, ingresa las primeras letras, así:</p>\n<pre><code class=\"language-bash\">> Math.sq\n</code></pre>\n<p>Luego presione la tecla <em>TAB</em> y REPL completará automáticamente la función:</p>\n<pre><code class=\"language-bash\">> Math.sqrt\n</code></pre>\n<p>Cuando hay varias posibilidades para autocompletar, se te mostrarán todas las opciones disponibles. Por ejemplo, ingresa solo:</p>\n<pre><code class=\"language-bash\">> Math.\n</code></pre>\n<p>Y presione <em>TAB</em> dos veces. Verás todos los posibles autocompletados:</p>\n<pre><code class=\"language-bash\">> Math.\nMath.__defineGetter__      Math.__defineSetter__      Math.__lookupGetter__\nMath.__lookupSetter__      Math.__proto__             Math.constructor\nMath.hasOwnProperty        Math.isPrototypeOf         Math.propertyIsEnumerable\nMath.toLocaleString        Math.toString              Math.valueOf\n\nMath.E                     Math.LN10                  Math.LN2\nMath.LOG10E                Math.LOG2E                 Math.PI\nMath.SQRT1_2               Math.SQRT2                 Math.abs\nMath.acos                  Math.acosh                 Math.asin\nMath.asinh                 Math.atan                  Math.atan2\nMath.atanh                 Math.cbrt                  Math.ceil\nMath.clz32                 Math.cos                   Math.cosh\nMath.exp                   Math.expm1                 Math.floor\nMath.fround                Math.hypot                 Math.imul\nMath.log                   Math.log10                 Math.log1p\nMath.log2                  Math.max                   Math.min\nMath.pow                   Math.random                Math.round\nMath.sign                  Math.sin                   Math.sinh\nMath.sqrt                  Math.tan                   Math.tanh\nMath.trunc\n</code></pre>\n<p>Presione <em>CTRL + C</em> para ir a una nueva línea en el indicador REPL sin ejecutar lo que está en la línea actual.</p>\n<p>Conocer los atajos de REPL te hará más eficiente al utilizarlo. Sin embargo, hay otra cosa que REPL proporciona para aumentar la productividad: los comandos REPL.</p>\n<h2>Paso 4 - Uso de comandos REPL</h2>\n<p>REPL tiene palabras clave específicas para ayudar a controlar su comportamiento. Cada comando comienza con un punto.</p>\n<h3>.help</h3>\n<p>Para enumerar todos los comandos disponibles, utiliza el comando <code>.help</code>:</p>\n<pre><code class=\"language-bash\">> .help\n</code></pre>\n<p>No hay muchos, pero son útiles para hacer cosas en REPL:</p>\n<pre><code class=\"language-bash\">.break    Sometimes you get stuck, this gets you out\n.clear    Alias for .break\n.editor   Enter editor mode\n.exit     Exit the REPL\n.help     Print this help message\n.load     Load JS from a file into the REPL session\n.save     Save all evaluated commands in this REPL session to a file\n\nPress Ctrl+C to abort current expression, Ctrl+D to exit the REPL\n</code></pre>\n<p>Si alguna vez olvidas un comando, siempre puedes consultar <code>.help</code> para listarlos y ver qué hace cada uno.</p>\n<h3>.break/.clear</h3>\n<p>Con <code>.break</code> o <code>.clear</code>, es fácil salir de una expresión de varias líneas. Por ejemplo, comienza un ciclo <code>for</code> de la siguiente manera:</p>\n<pre><code class=\"language-bash\">> for (let i = 0; i &#x3C; 100000000; i++) {\n</code></pre>\n<p>Para salir directamente, en lugar de ingresar la siguiente línea, usa el comando <code>.break</code> o <code>.clear</code>:</p>\n<pre><code class=\"language-bash\">... .break\n</code></pre>\n<p>Verás un nuevo símbolo de mensaje de REPL:</p>\n<pre><code class=\"language-bash\">>\n</code></pre>\n<p>REPL pasará a una nueva línea sin ejecutar ningún código, similar a presionar <em>CTRL + C</em>.</p>\n<h3>.save and .load</h3>\n<p>El comando <code>.save</code> almacena en un archivo todo el código que ejecutaste desde el inició de la sesión actual de REPL. El comando <code>.load</code> ejecuta todo el código JavaScript desde un archivo dentro de REPL.</p>\n<p>Sal de la sesión usando el comando <code>.exit</code> o con el atajo <em>CTRL + D</em>. A continuación inicia un nuevo REPL con <code>node</code>. Ahora solo se guardará el código que estás a punto de escribir.</p>\n<p>Crea un array con frutas:</p>\n<pre><code class=\"language-bash\">> fruits = ['banana', 'apple', 'mango']\n</code></pre>\n<p>En la siguiente línea, REPL mostrará:</p>\n<pre><code class=\"language-bash\">[ 'banana', 'apple', 'mango' ]\n</code></pre>\n<p>Guarda esta variable en un nuevo archivo, <code>fruit.js</code>:</p>\n<pre><code class=\"language-bash\">> .save fruits.js\n</code></pre>\n<p>Verás un mensaje de confirmación:</p>\n<pre><code class=\"language-bash\">Session saved to: fruits.js\n</code></pre>\n<p>El archivo se guarda en el mismo directorio donde se abrió REPL.</p>\n<p>Sal de la sesión e inicia un nuevo REPL con <code>node</code>. Cuando se te solicite, carga el archivo <code>fruit.js</code> ingresando:</p>\n<pre><code class=\"language-bash\">> .load fruits.js\n</code></pre>\n<p>Esto resulta en:</p>\n<pre><code class=\"language-bash\">fruits = ['banana', 'apple', 'mango']\n[ 'banana', 'apple', 'mango' ]\n</code></pre>\n<p>El comando <code>.load</code> lee cada línea de código y lo ejecuta, como se esperaba de un intérprete de JavaScript. Ahora puedes usar la variable <code>fruits</code> como si hubiera estado disponible en la sesión actual todo el tiempo.</p>\n<p>Escribe el siguiente comando y presione <em>ENTRAR</em>:</p>\n<pre><code class=\"language-bash\">> fruits[1]\n</code></pre>\n<p>REPL dará como resultado:</p>\n<pre><code class=\"language-bash\">'apple'\n</code></pre>\n<p>Puedes cargar cualquier archivo JavaScript con el comando <code>.load</code>, no solo los elementos que guardaste previamente desde REPL.</p>\n<p>Hagamos una demostración rápida abriendo tu editor de código preferido o nano, un editor de línea de comandos, y creemos un nuevo archivo llamado <code>peanuts.js</code>:</p>\n<pre><code class=\"language-bash\">nano peanuts.js\n</code></pre>\n<p>Ahora que el archivo está abierto, escribe lo siguiente:</p>\n<pre><code class=\"language-bash\">console.log('I love peanuts!');\n</code></pre>\n<p>Guarda y sal de nano presionando <em>CTRL + X</em>.</p>\n<p>En el mismo directorio donde guardaste <code>peanuts.js</code>, inicia una sesión de REPL con el comando <code>node</code>. Carga <code>peanuts.js</code> en su sesión:</p>\n<pre><code class=\"language-bash\">> .load peanuts.js\n</code></pre>\n<p>El comando <code>.load</code> ejecutará la declaración <code>console.log</code> y mostrará el siguiente resultado:</p>\n<pre><code class=\"language-bash\">console.log('I love peanuts!');\n\nI love peanuts!\nundefined\n>\n</code></pre>\n<p>Cuando el uso de REPL es más extenso de lo esperado, o si crees que tienes un fragmento de código interesante que vale la pena compartir o explorar con más profundidad, puedes usar los comandos <code>.save</code> y <code>.load</code> para hacer posibles ambos objetivos.</p>\n<h2>Conclusión</h2>\n<p>REPL es un entorno interactivo que te permite ejecutar código JavaScript sin tener que escribirlo primero en un archivo.</p>\n","ogImage":{"url":"/assets/nodejs/como-usar-REPL.png"},"coverImage":"/assets/nodejs/como-usar-REPL.png"}},"__N_SSG":true}